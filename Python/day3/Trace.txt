Guess the output of the program:
1.	class Document:
2.	    limit = 5
3.	 
4.	    def __init__(self, title, authors, text):
5.	        self.title = title
6.	        self.authors = authors
7.	        self.text = text
8.	 
9.	    def get_text(self, short_version = True):
10.	        if not short_version or len(self.text) < Document.limit:
11.	            return self.text
12.	 
13.	        return self.text[:Document.limit]
14.	 
15.	 
16.	class Article(Document):
17.	    def get_text(self):
18.	        return super().get_text(False)
19.	 
20.	 
21.	class Book(Document):
22.	    pass
23.	 
24.	 
25.	if __name__ == '__main__':
26.	    b = Book('Mastering Python', ['Mostafa'], 'hey_' * 5)
27.	    print(b.get_text())
28.	 
29.	    a = Article('Mastering Python', ['Mostafa'], 'hey_' * 5)
30.	    print(a.get_text())


sol: hey_h , hey_hey_hey_hey_hey_

##########################################


Guess the output of the program:
1.	class A:
2.	    pass
3.	 
4.	class B(A):
5.	    pass
6.	 
7.	if __name__ == '__main__':
8.	    print(isinstance(B, A))


sol: False

##########################################

Guess the output of the program:
1.	class Document:
2.	    limit = 5
3.	 
4.	    def __init__(self, title, authors, text):
5.	        self.title = title
6.	        self.authors = authors
7.	        self.text = text
8.	 
9.	    def get_text(self, short_version = True):
10.	        if not short_version or len(self.text) < Document.limit:
11.	            return self.text
12.	 
13.	        return self.text[:Document.limit]
14.	 
15.	 
16.	class Article(Document):
17.	    def get_text(self):
18.	        return super().get_text(False)
19.	 
20.	 
21.	if __name__ == '__main__':
22.	    print(issubclass(Document, Article))


sol: False

####################################################

1.	print(issubclass(type(True), float))


sol: False

####################################################



Guess the output of this program:
1.	class Employee:
2.	    def __init__(self, name, salary):
3.	        super().__init__()
4.	        self.name = name
5.	        self.salary = salary
6.	 
7.	    def __repr__(self):
8.	        return f'{self.name, self.salary}'
9.	 
10.	 
11.	class TemporaryEmployee(Employee):
12.	    def __init__(self, name, hours, dollars_per_hour):
13.	        super().__init__(name, hours * dollars_per_hour)
14.	        self.hours = hours
15.	        self.dollars_per_hour = dollars_per_hour
16.	 
17.	    def __repr__(self):
18.	        return super().__repr__() + f' {self.hours, self.dollars_per_hour}'
19.	 
20.	 
21.	class Consultant(TemporaryEmployee):
22.	    def __init__(self, name, hours, dollars_per_hour, specialization):
23.	        super().__init__(name, hours, dollars_per_hour)
24.	        self.specialization = specialization
25.	 
26.	    def __repr__(self):
27.	        return super().__repr__() + f' {self.specialization}'
28.	 
29.	 
30.	obj = Consultant('Mostafa', 10, 51, 'CS')
31.	print(repr(obj))



sol: Mostafa, 510 10, 51 CS

###################################################################################


Guess the output of this program:
1.	class A:
2.	    def __init__(self):
3.	        self.id = self.get_id()
4.	 
5.	    def get_id(self):
6.	        return 'A'
7.	 
8.	 
9.	class B(A):
10.	    def __init__(self):
11.	        super().__init__()
12.	 
13.	    def get_id(self):
14.	        return 'B'
15.	 
16.	 
17.	print(B().id)



sol: B

###################################################################################

Guess the output of this program:
1.	class GraphAlgorithm:
2.	    def __init__(self):
3.	        self.algorithms_steps = [self.step1_general, self.step2_abstract, self.step3_general]
4.	 					G1			APQ		G3		Bye
5.	    def run(self):
6.	        return ''.join([step() for step in self.algorithms_steps])
7.	 
8.	    def step1_general(self):
9.	        return 'G1'
10.	 
11.	    def step3_general(self):
12.	        return 'G3'
13.	 
14.	class Dijkstra(GraphAlgorithm):
15.	    def __init__(self):
16.	        super().__init__()
17.	        self.algorithms_steps.append(self.end)         		 Bye
18.	 
19.	    def end(self):
20.	        return ' Bye'
21.	 
22.	 
23.	class DijkstraPriorityQueue(Dijkstra):
24.	    def __init__(self):
25.	        super().__init__()
26.	 
27.	    def step2_abstract(self):							APQ
28.	        return 'APQ'
29.	 
30.	 
31.	print(DijkstraPriorityQueue().run())



sol: G1APQG3Bye

#######################################################################################################




